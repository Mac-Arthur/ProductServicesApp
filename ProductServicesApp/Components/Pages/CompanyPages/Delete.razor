@page "/companies/delete"
@using Microsoft.EntityFrameworkCore
@using ProductServicesApp.Models
@inject IDbContextFactory<ProductServicesApp.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Company</h2>
    <hr />
    @if (company is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@company.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CompanyMail</dt>
            <dd class="col-sm-10">@company.CompanyMail</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ContactPersonName</dt>
            <dd class="col-sm-10">@company.ContactPersonName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ContactPersonMail</dt>
            <dd class="col-sm-10">@company.ContactPersonMail</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@company.DateCreated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateUpdated</dt>
            <dd class="col-sm-10">@company.DateUpdated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">IsActive</dt>
            <dd class="col-sm-10">@company.IsActive</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CountryId</dt>
            <dd class="col-sm-10">@company.CountryId</dd>
        </dl>
        <EditForm method="post" Model="company" OnValidSubmit="DeleteCompany" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(company is null)">Delete</button> |
            <a href="/companies">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Company? company;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        company = await context.Company.FirstOrDefaultAsync(m => m.Id == Id);

        if (company is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteCompany()
    {
        using var context = DbFactory.CreateDbContext();
        company.IsActive = false;
        context.Company.Update(company);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/companies");
        // context.Company.Remove(company!);
    }
}
