@page "/companies/details"
@using Microsoft.EntityFrameworkCore
@using ProductServicesApp.Models
@inject IDbContextFactory<ProductServicesApp.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
	<h2>Company</h2>
	<hr />
	@if (company is null)
	{
		<p><em>Loading...</em></p>
	}
	else
	{
		<dl class="row">
			<dt class="col-sm-2">Name</dt>
			<dd class="col-sm-10">@company.Name</dd>
			<dt class="col-sm-2">CompanyMail</dt>
			<dd class="col-sm-10">@company.CompanyMail</dd>
			<dt class="col-sm-2">ContactPersonName</dt>
			<dd class="col-sm-10">@company.ContactPersonName</dd>
			<dt class="col-sm-2">ContactPersonMail</dt>
			<dd class="col-sm-10">@company.ContactPersonMail</dd>
			<dt class="col-sm-2">DateCreated</dt>
			<dd class="col-sm-10">@company.DateCreated</dd>
			<dt class="col-sm-2">DateUpdated</dt>
			<dd class="col-sm-10">@company.DateUpdated</dd>
			<dt class="col-sm-2">IsActive</dt>
			<dd class="col-sm-10">@company.IsActive</dd>
			<dt class="col-sm-2">CountryId</dt>
			<dd class="col-sm-10">@company.CountryId</dd>
		</dl>
		<div>
			<a href="@($"/companies/edit?id={company.Id}")">Edit</a> |


			<a href="@($"/products/create/{company.Id}")">Add Product</a>

			<a href="@($"/companies")">Back to List</a>
		</div>
	}
</div>

@code {
	private Company? company;

	[SupplyParameterFromQuery]
	private int Id { get; set; }

	protected override async Task OnInitializedAsync()
	{
		using var context = DbFactory.CreateDbContext();
		company = await context.Company.FirstOrDefaultAsync(m => m.Id == Id);

		if (company is null)
		{
			NavigationManager.NavigateTo("notfound");
		}
	}


}
