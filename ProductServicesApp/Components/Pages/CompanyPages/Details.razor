@page "/companies/details"
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.EntityFrameworkCore
@using ProductServicesApp.Models
@using ProductServicesApp.Models.Entities
@inject IDbContextFactory<ProductServicesApp.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@using ProductServicesApp.Data
@attribute [StreamRendering]
@rendermode InteractiveServer
@attribute [Authorize]

<PageTitle>Details</PageTitle>

<div class="container mt-3">
    <div class="row">
        <h4>Company Details</h4>
        <hr />
        <div class="col-md-6">
            <div>
                <dl class="row">
                    <dt class="col-4">Name</dt>
                    <dd class="col-8">@company?.Name</dd>
                    <dt class="col-4">CompanyMail</dt>
                    <dd class="col-8">@company?.CompanyMail</dd>
                    <dt class="col-4">ContactPersonName</dt>
                    <dd class="col-8">@company?.ContactPersonName</dd>
                    <dt class="col-4">ContactPersonMail</dt>
                    <dd class="col-8">@company?.ContactPersonMail</dd>
                    <dt class="col-4">DateCreated</dt>
                    <dd class="col-8">@company?.DateCreated</dd>
                    <dt class="col-4">DateUpdated</dt>
                    <dd class="col-8">@company?.DateUpdated</dd>
                    <dt class="col-4">IsActive</dt>
                    <dd class="col-8">@company?.IsActive</dd>
                    <dt class="col-4">CountryId</dt>
                    <dd class="col-8">@company?.CountryId</dd>
                    <dt class="col-4">Country</dt>
                    <dd class="col-8">@company?.Country?.Name</dd>
                </dl>
                <div>
                    <a class="btn btn-sm btn-secondary" href="@($"/companies/edit?id={company?.Id}")">Edit Company</a> |
                    <a class="btn btn-sm btn-secondary" href="@($"/products/create/{company?.Id}")">Add Product</a> |
                    <a class="btn btn-sm btn-dark" href="@($"/companies")">Back to List</a>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            @if (FilteredProductDTO == null || !FilteredProductDTO.Any())
            {
                <p><em>No products available for this company </em> </p>
            }
            else
            {
                <div class="table-responsive bg-white shadow border p-3 rounded-4 mt-4">
                    <h6 class="text-center"> All Company products</h6>
                    <QuickGrid Class="table table-bordered mt-4" Items="FilteredProductDTO" Pagination="pagination">
                        <TemplateColumn Context="companyproduct" Title="Product Name" Align="Align.Center">
                            @companyproduct.Name
                        </TemplateColumn>
                        <TemplateColumn Context="companyproduct" Title="Exporter" Align="Align.Center">
                            @if (companyproduct.IsExporter)
                            {
                                <span><i class="bi bi-check-lg text-success h4"></i></span>
                            }
                            else
                            {
                                <span><i class="bi bi-x-lg text-danger h4"></i></span>
                            }
                        </TemplateColumn>
                        <TemplateColumn Context="companyproduct" Title="Importer" Align="Align.Center">
                            @if (companyproduct.IsImporter)
                            {
                                <span><i class="bi bi-check-lg text-success h4"></i></span>
                            }
                            else
                            {
                                <span><i class="bi bi-x-lg text-danger h4"></i></span>
                            }
                        </TemplateColumn>
                        <TemplateColumn Context="companyproduct" Title="Action" Align="Align.Center">
                            <a href=@($"/companyproducts/edit?id={companyproduct.ProductId}") class="btn btn-sm"> <i class="bi bi-pencil-fill text-dark"></i> </a>
                            <a href="/companyproducts/delete/@companyproduct.ProductId" class="btn btn-sm"> <i class="bi bi-trash3-fill text-danger"></i> </a>       
                        </TemplateColumn>
                    </QuickGrid>
                    <Paginator State="pagination">  </Paginator>
                </div>
            }
        </div>
    </div>
</div>

 
@code {
    private Company? company;
    private ApplicationDbContext context = default!;
    private List<CompanyProduct> companyproducts = new List<CompanyProduct>();
    [SupplyParameterFromQuery] private int Id { get; set; }
    string NameFilter = "";
    PaginationState pagination = new PaginationState { ItemsPerPage = 7 };

    IQueryable<ProductDTO> FilteredProductDTO => GetFilteredProduct(NameFilter);

    public IQueryable<ProductDTO> GetFilteredProduct(string value = "")
    {
        // Ensuring all the data is loaded before filtering
        return companyproducts
            .Select(c => new ProductDTO
                {
                    Name = c.Product!.Name,
                    IsExporter = c.IsExporter,
                    IsImporter = c.IsImporter,
                    ProductId = c.Id
                })
            .Where(c => c.Name!.ToLower().Contains(value.ToLower()))
            .AsQueryable();
    }

    protected override async Task OnInitializedAsync()
    {
        context = await DbFactory.CreateDbContextAsync();

        // Ensure the company is loaded first, then load the products
        company = await context.Company
            .Include(c => c.Country)
            .FirstOrDefaultAsync(m => m.Id == Id);

        if (company == null)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }

        // Load products after the company has been retrieved
        companyproducts = await context.CompanyProduct
            .Where(p => p.CompanyId == company.Id)
            .Include(cp => cp.Product) // Ensure products are included
            .ToListAsync();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
 }
