@page "/companies/create"
@using Microsoft.EntityFrameworkCore
@using ProductServicesApp.Models;
@using ProductServicesApp.Models.Entities
@inject IDbContextFactory<ProductServicesApp.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject IJSRuntime js
@rendermode InteractiveServer
@attribute [StreamRendering]
@attribute [Authorize]

<PageTitle>Create</PageTitle>


<h4>Enter Company Details</h4>
<hr />
<div class="row">
	<div class="col-md-4">
		<EditForm method="post" Model="Company" OnValidSubmit="AddCompany" FormName="create" Enhance>
			<DataAnnotationsValidator />
			<ValidationSummary class="text-danger" />
			<div class="mb-2">
				<label for="name" class="form-label">Name:</label>
				<InputText id="name" @bind-Value="Company.Name" class="form-control" />
				<ValidationMessage For="() => Company.Name" class="text-danger" />
			</div>
			<div class="mb-2">
				<label for="companymail" class="form-label">Company Mail:</label>
				<InputText id="companymail" @bind-Value="Company.CompanyMail" class="form-control" />
				<ValidationMessage For="() => Company.CompanyMail" class="text-danger" />
			</div>
			<div class="mb-2">
				<label for="contactpersonname" class="form-label">Contact Person Name:</label>
				<InputText id="contactpersonname" @bind-Value="Company.ContactPersonName" class="form-control" />
				<ValidationMessage For="() => Company.ContactPersonName" class="text-danger" />
			</div>
			<div class="mb-2">
				<label for="contactpersonmail" class="form-label">Contact Person Mail:</label>
				<InputText id="contactpersonmail" @bind-Value="Company.ContactPersonMail" class="form-control" />
				<ValidationMessage For="() => Company.ContactPersonMail" class="text-danger" />
			</div>
			<div class="mb-2">
				<label for="countryid" class="form-label">Country:</label>
				<InputSelect id="countryid" @bind-Value="Company.CountryId" class="form-control">
					<option value="">Select a country</option>
					@foreach (var country in Countries)
					{
						<option value="@country.Id">@country.Name</option>
					}
				</InputSelect>
				<ValidationMessage For="() => Company.CountryId" class="text-danger" />
			</div>  
			<div class="mt-4">
			<button type="submit" class="btn btn-sm btn-primary">Create</button>
				<a class="btn btn-sm btn-dark ms-2" href="/companies">  Back  </a>
			</div>
		</EditForm>
	</div>
</div>



@code {
	[SupplyParameterFromForm]
	private Company Company { get; set; } = new();
	private List<Country> Countries = new(); 

	protected override async Task OnInitializedAsync()
	{
		using var context = DbFactory.CreateDbContext();
		Countries = await context.Country.ToListAsync();  
	}
	private async Task AddCompany()
	{
		using var context = DbFactory.CreateDbContext();
		var existingcompany = await context.Company.FirstOrDefaultAsync(c => c.Name == Company.Name.ToLower() && c.CountryId == Company.CountryId);
		if(existingcompany is null)
		{
			Company.DateCreated = DateTime.Now;
			Company.DateUpdated = DateTime.Now;
			Company.IsActive = true;
			context.Company.Add(Company);
			await context.SaveChangesAsync();
			NavigationManager.NavigateTo("/companies");
		}
		else
		{
			await js.InvokeVoidAsync("alert", "Company already exists.");
		}

	}
}

   