@page "/companies/edit"
@using Microsoft.EntityFrameworkCore
@using ProductServicesApp.Models
@inject IDbContextFactory<ProductServicesApp.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Company</h2>
<hr />
@if (Company is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Company" OnValidSubmit="UpdateCompany" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Company.Id" value="@Company.Id" />
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="Company.Name" class="form-control" />
                    <ValidationMessage For="() => Company.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="companymail" class="form-label">CompanyMail:</label>
                    <InputText id="companymail" @bind-Value="Company.CompanyMail" class="form-control" />
                    <ValidationMessage For="() => Company.CompanyMail" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="contactpersonname" class="form-label">ContactPersonName:</label>
                    <InputText id="contactpersonname" @bind-Value="Company.ContactPersonName" class="form-control" />
                    <ValidationMessage For="() => Company.ContactPersonName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="contactpersonmail" class="form-label">ContactPersonMail:</label>
                    <InputText id="contactpersonmail" @bind-Value="Company.ContactPersonMail" class="form-control" />
                    <ValidationMessage For="() => Company.ContactPersonMail" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="datecreated" class="form-label">DateCreated:</label>
                    <InputDate id="datecreated" @bind-Value="Company.DateCreated" class="form-control" disabled />
                    <ValidationMessage For="() => Company.DateCreated" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="dateupdated" class="form-label">DateUpdated:</label>
                    <InputDate id="dateupdated" @bind-Value="Company.DateUpdated" class="form-control" disabled />
                    <ValidationMessage For="() => Company.DateUpdated" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="isactive" class="form-label">IsActive:</label>
                    <InputCheckbox id="isactive" @bind-Value="Company.IsActive" class="form-check-input"  />
                    <ValidationMessage For="() => Company.IsActive" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="countryid" class="form-label">CountryId:</label>
                    <InputNumber id="countryid" @bind-Value="Company.CountryId" class="form-control" />
                    <ValidationMessage For="() => Company.CountryId" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/companies">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Company? Company { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Company ??= await context.Company.FirstOrDefaultAsync(m => m.Id == Id);

        if (Company is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

   
    private async Task UpdateCompany()
    {
        using var context = DbFactory.CreateDbContext();

        // Fetch the existing company from the database
        var existingCompany = await context.Company.AsNoTracking().FirstOrDefaultAsync(c => c.Id == Company!.Id);

        if (existingCompany is null)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }

        // Preserve the original DateCreated value
        Company.DateCreated = existingCompany.DateCreated;

        // Update the DateUpdated field to the current time
        Company.DateUpdated = DateTime.Now;

        // Attach and mark the entity as modified
        context.Attach(Company!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!CompanyExists(Company!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/companies");
    }

    private bool CompanyExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Company.Any(e => e.Id == id);
    }

    // private async Task UpdateCompany()
    // {
    //     using var context = DbFactory.CreateDbContext();
    //     context.Attach(Company!).State = EntityState.Modified;

    //     try
    //     {
    //         await context.SaveChangesAsync();
    //     }
    //     catch (DbUpdateConcurrencyException)
    //     {
    //         if (!CompanyExists(Company!.Id))
    //         {
    //             NavigationManager.NavigateTo("notfound");
    //         }
    //         else
    //         {
    //             throw;
    //         }
    //     }

    //     NavigationManager.NavigateTo("/companies");
    // }

    // private bool CompanyExists(int id)
    // {
    //     using var context = DbFactory.CreateDbContext();
    //     return context.Company.Any(e => e.Id == id);
    // }
}
