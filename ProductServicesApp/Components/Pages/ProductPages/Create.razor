@page "/products/create/{CompanyId:int}"

@using Microsoft.EntityFrameworkCore
@using ProductServicesApp.Models
@inject IDbContextFactory<ProductServicesApp.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Product</h2>
<hr />
<div class="row">
	<div class="col-md-4">
		<EditForm method="post" Model="Product" OnValidSubmit="AddProduct" FormName="create" Enhance>
			<DataAnnotationsValidator />
			<ValidationSummary class="text-danger" />
			<div class="mb-3">
				<label for="name" class="form-label">Name:</label>
				<InputText id="name" @bind-Value="Product.Name" class="form-control" />
				<ValidationMessage For="() => Product.Name" class="text-danger" />
			</div>
			<div class="mb-3">
				<label for="isexporter" class="form-label">IsExporter:</label>
				<InputCheckbox id="isexporter" @bind-Value="Product.IsExporter" class="form-check-input" />
				<ValidationMessage For="() => Product.IsExporter" class="text-danger" />
			</div>
			<div class="mb-3">
				<label for="isimporter" class="form-label">IsImporter:</label>
				<InputCheckbox id="isimporter" @bind-Value="Product.IsImporter" class="form-check-input" />
				<ValidationMessage For="() => Product.IsImporter" class="text-danger" />
			</div>

			<button type="submit" class="btn btn-primary">Create</button>
		</EditForm>
	</div>
</div>

<div>
	<a href="/products">Back to List</a>
</div>

@code {
	[SupplyParameterFromForm]
	private Product Product { get; set; } = new();

	[Parameter]
	public int CompanyId { get; set; }

	protected override void OnInitialized()
	{
		Console.WriteLine($"CompanyId: {CompanyId}"); 
		Product.CompanyId = CompanyId;
	}

	private async Task AddProduct()
	{
		if (Product.CompanyId == 0)
		{
			throw new InvalidOperationException("CompanyId is not set.");
		}

		Product.DateCreated = DateTime.Now;
		Product.DateUpdated = DateTime.Now;
		using var context = DbFactory.CreateDbContext();
		context.Product.Add(Product);

		await context.SaveChangesAsync();
		NavigationManager.NavigateTo("/products");
	}
}
