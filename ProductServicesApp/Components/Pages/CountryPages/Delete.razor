@page "/countries/delete"
@using Microsoft.EntityFrameworkCore
@using ProductServicesApp.Models;
@using ProductServicesApp.Models.Entities
@inject IDbContextFactory<ProductServicesApp.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>




<div>
    <h4>Country Details</h4>
    <hr />
    @if (country is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@country.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ShortCode</dt>
            <dd class="col-sm-10">@country.ShortCode</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@country.DateCreated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateUpdated</dt>
            <dd class="col-sm-10">@country.DateUpdated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">IsActive</dt>
            <dd class="col-sm-10">@country.IsActive</dd>
        </dl>
        <p class="text-danger">Are you sure you want to delete this?</p>
        <EditForm method="post" Model="country" OnValidSubmit="DeleteCountry" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(country is null)">Delete</button> |
            <a class="btn btn-dark" href="/countries">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Country? country;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        country = await context.Country.FirstOrDefaultAsync(m => m.Id == Id);

        if (country is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteCountry()
    {
        using var context = DbFactory.CreateDbContext();
        context.Country.Remove(country!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/countries");
        // country.IsActive = false;
        // context.Country.Update(country);
    }
}
