@page "/countries/details"
@using Microsoft.EntityFrameworkCore
@using ProductServicesApp.Models;
@using ProductServicesApp.Models.Entities
@inject IDbContextFactory<ProductServicesApp.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>Country Details</PageTitle>



<div>
    <h4>Country Details</h4>
    <hr class="mb-5" />
    @if (country is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@country.Name</dd>
            <dt class="col-sm-2">ShortCode</dt>
            <dd class="col-sm-10">@country.ShortCode</dd>
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@country.DateCreated</dd>
            <dt class="col-sm-2">DateUpdated</dt>
            <dd class="col-sm-10">@country.DateUpdated</dd>
            <dt class="col-sm-2">IsActive</dt>
            <dd class="col-sm-10">@country.IsActive</dd>
        </dl>
        <div>
            <a class="btn btn-sm btn-secondary" href="@($"/countries/edit?id={country.Id}")">Edit</a> |
            <a class="btn btn-sm btn-dark"  href="@($"/countries")">Back to List</a>
        </div>
    }
</div>

@code {
    private Country? country;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        country = await context.Country.FirstOrDefaultAsync(m => m.Id == Id);

        if (country is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
